//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ntier_identity_without_signinmanager.AccountService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IAccountWebService")]
    public interface IAccountWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/Create", ReplyAction="http://tempuri.org/IAccountWebService/CreateResponse")]
        bool Create(dto.Account user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/Create", ReplyAction="http://tempuri.org/IAccountWebService/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(dto.Account user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/ValidateIdentityUser", ReplyAction="http://tempuri.org/IAccountWebService/ValidateIdentityUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.Account))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.BaseEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.CustomerLoginResults))]
        dto.IdentityLoginResult ValidateIdentityUser(string username, string password, bool shouldLockout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/ValidateIdentityUser", ReplyAction="http://tempuri.org/IAccountWebService/ValidateIdentityUserResponse")]
        System.Threading.Tasks.Task<dto.IdentityLoginResult> ValidateIdentityUserAsync(string username, string password, bool shouldLockout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/CreateIdentity", ReplyAction="http://tempuri.org/IAccountWebService/CreateIdentityResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.Account))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.BaseEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.IdentityLoginResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(dto.CustomerLoginResults))]
        System.Security.Claims.ClaimsIdentity CreateIdentity(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/CreateIdentity", ReplyAction="http://tempuri.org/IAccountWebService/CreateIdentityResponse")]
        System.Threading.Tasks.Task<System.Security.Claims.ClaimsIdentity> CreateIdentityAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/GetSecurityStamp", ReplyAction="http://tempuri.org/IAccountWebService/GetSecurityStampResponse")]
        string GetSecurityStamp(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/GetSecurityStamp", ReplyAction="http://tempuri.org/IAccountWebService/GetSecurityStampResponse")]
        System.Threading.Tasks.Task<string> GetSecurityStampAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/IdentityUserExistsById", ReplyAction="http://tempuri.org/IAccountWebService/IdentityUserExistsByIdResponse")]
        bool IdentityUserExistsById(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/IdentityUserExistsById", ReplyAction="http://tempuri.org/IAccountWebService/IdentityUserExistsByIdResponse")]
        System.Threading.Tasks.Task<bool> IdentityUserExistsByIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/SupportsUserSecurityStamp", ReplyAction="http://tempuri.org/IAccountWebService/SupportsUserSecurityStampResponse")]
        bool SupportsUserSecurityStamp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWebService/SupportsUserSecurityStamp", ReplyAction="http://tempuri.org/IAccountWebService/SupportsUserSecurityStampResponse")]
        System.Threading.Tasks.Task<bool> SupportsUserSecurityStampAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountWebServiceChannel : ntier_identity_without_signinmanager.AccountService.IAccountWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountWebServiceClient : System.ServiceModel.ClientBase<ntier_identity_without_signinmanager.AccountService.IAccountWebService>, ntier_identity_without_signinmanager.AccountService.IAccountWebService {
        
        public AccountWebServiceClient() {
        }
        
        public AccountWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Create(dto.Account user, string password) {
            return base.Channel.Create(user, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(dto.Account user, string password) {
            return base.Channel.CreateAsync(user, password);
        }
        
        public dto.IdentityLoginResult ValidateIdentityUser(string username, string password, bool shouldLockout) {
            return base.Channel.ValidateIdentityUser(username, password, shouldLockout);
        }
        
        public System.Threading.Tasks.Task<dto.IdentityLoginResult> ValidateIdentityUserAsync(string username, string password, bool shouldLockout) {
            return base.Channel.ValidateIdentityUserAsync(username, password, shouldLockout);
        }
        
        public System.Security.Claims.ClaimsIdentity CreateIdentity(string userId) {
            return base.Channel.CreateIdentity(userId);
        }
        
        public System.Threading.Tasks.Task<System.Security.Claims.ClaimsIdentity> CreateIdentityAsync(string userId) {
            return base.Channel.CreateIdentityAsync(userId);
        }
        
        public string GetSecurityStamp(string userId) {
            return base.Channel.GetSecurityStamp(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetSecurityStampAsync(string userId) {
            return base.Channel.GetSecurityStampAsync(userId);
        }
        
        public bool IdentityUserExistsById(string userId) {
            return base.Channel.IdentityUserExistsById(userId);
        }
        
        public System.Threading.Tasks.Task<bool> IdentityUserExistsByIdAsync(string userId) {
            return base.Channel.IdentityUserExistsByIdAsync(userId);
        }
        
        public bool SupportsUserSecurityStamp() {
            return base.Channel.SupportsUserSecurityStamp();
        }
        
        public System.Threading.Tasks.Task<bool> SupportsUserSecurityStampAsync() {
            return base.Channel.SupportsUserSecurityStampAsync();
        }
    }
}
